import json
import ollama

def avaliar_redacao(json_input: str) -> str:
    """
    Receives a JSON string with 'tema', 'texto', and 'competencias',
    and returns the textual evaluation generated by the Gemma model via Ollama.
    """
    # Parse JSON
    data = json.loads(json_input)
    redacao = data 

    # Acessa o primeiro elemento (dicionário) da lista # por enquanto (acima), acessa direto às chaves como se o JSON fossem um único dicionário, só que é uma lista de dicionários (modificar depois)
    #redacao = data[0] 

    # Obtém dados do dicionário da redação
    tema = redacao["tema"]
    texto = redacao["texto"]
    competencias_ = redacao["competencias"]  # Renomeado para evitar conflito

    # Processar as competências em uma lista de dicionários
    competencias_lista = []
    for item in competencias_:
        competencia_info = {
            "competencia": item["competencia"],
            "nota": item["nota"],
            "motivo": item["motivo"]
        }
        competencias_lista.append(competencia_info)

    # Monta o system prompt com as competências
    competencias_str = "\n".join([
        f"- **{comp['competencia']}**: Nota {comp['nota']} | Motivo: {comp['motivo']}"
        for comp in competencias_lista
    ])

    # Monta o system prompt
    system_prompt = (
        "Você é um avaliador pedagógico especialista em produção textual no contexto do ENEM. "
        "Sua tarefa é analisar uma redação escrita por um estudante, considerando as notas atribuídas "
        "a cada uma das cinco competências avaliativas do exame e também o tema (i.e., a proposta) da redação correspondente.\n\n"
        "Você deve gerar sugestões específicas de melhoria para o texto, sempre levando em conta:\n"
        "- O conteúdo integral da redação produzida.\n"
        "- As notas atribuídas em cada uma das cinco competências (0–200).\n"
        "- O tema da redação (proposta e/ou texto motivador).\n\n"
        f"**Competências Avaliadas:**\n{competencias_str}\n\n"
        "Apresente sua resposta no seguinte formato:\n\n"
        "---\n"
        "**Competência X** – Nota: [nota atribuída]\n"
        "[Até 3 sugestões focadas nessa competência, levando em conta o conteúdo da redação, o escopo do tema e a nota recebida]\n"
        "---\n\n"
        "Importante: Use o tema da redação para avaliar a pertinência temática e o foco argumentativo do estudante. "
        "Se a proposta de intervenção for vaga, sugira maneiras de conectá-la melhor ao problema central. "
        "Não reescreva a redação nem emita julgamentos genéricos; concentre-se em orientar melhorias concretas."
    )

    # Monta o user prompt
    competencias_str_user = "\n".join([
        f"Competência {i+1}: Nota {comp['nota']} | {comp['competencia']}"
        for i, comp in enumerate(competencias_)
    ])

    user_prompt = (
        f"Tema da redação:\n{tema}\n\n"
        f"Texto da redação:\n{texto}\n\n"
        f"Notas por competência:\n{competencias_str_user}"
    )

    # Chamada ao modelo via Ollama
    response = ollama.chat(
        model="gemma:7b",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ]
    )

    return response["message"]["content"]
    
    resultado = avaliar_redacao(json_input_example)
    print(resultado)
