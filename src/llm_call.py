import json
import ollama

def avaliar_redacao(json_input: str) -> str:
    """
    Receives a JSON string with 'tema', 'texto', and 'competencias',
    and returns the textual evaluation generated by the Gemma model via Ollama.
    """
    # Parse JSON
    data = json.loads(json_input)
    redacao = data[0]

    # Obtém dados do dicionário da redação
    tema = redacao["tema"]
    texto = redacao["texto"]
    competencias_dados = redacao["competencias"]

    # Monta o system prompt com as competências
    competencias_str = "\n".join([
        f"- **{comp['competencia']}**: Nota {comp['nota']}"
        for comp in competencias_dados
    ])

    # Monta o system prompt
    system_prompt = (
        "Você é um avaliador pedagógico especialista em produção textual no contexto do ENEM. "
        "Sua tarefa é analisar uma redação escrita por um estudante, considerando as notas atribuídas "
        "a cada uma das cinco competências avaliativas do exame e também o tema (i.e., a proposta) da redação correspondente.\n\n"
        "Você deve gerar sugestões específicas de melhoria para o texto, sempre levando em conta:\n"
        "- O conteúdo integral da redação produzida.\n"
        "- As notas atribuídas em cada uma das cinco competências (0–200).\n"
        "- O tema da redação (proposta e/ou texto motivador).\n\n"
        f"**Competências Avaliadas:**\n{competencias_str}\n\n"
        "Apresente sua resposta no seguinte formato:\n\n"
        "**Sugestões de Melhoria (uma por competência):**\n"
        "**Competência 1** (Nota: [nota]): [Sugestão concisa]\n"
        "**Competência 2** (Nota: [nota]): [Sugestão concisa]\n"
        "**Competência 3** (Nota: [nota]): [Sugestão concisa]\n"
        "**Competência 4** (Nota: [nota]): [Sugestão concisa]\n"
        "**Competência 5** (Nota: [nota]): [Sugestão concisa]\n\n"
        "Guie-se pelas notas fornecidas e pelo conteúdo do texto para cada sugestão."
        "[Para cada competência, gere até 3 sugestões focadas nessa competência, levando em conta o conteúdo da redação, o escopo do tema e a nota recebida]\n"
        "---\n\n"
        "Importante: Use o tema da redação para avaliar a pertinência temática e o foco argumentativo do estudante. "
        "Se a proposta de intervenção for vaga, sugira maneiras de conectá-la melhor ao problema central. "
        "Não reescreva a redação nem emita julgamentos genéricos; concentre-se em orientar melhorias concretas."
    )

    # Monta o user prompt
    competencias_str_user = "\n".join([
        f"Competência {i+1}: Nota {comp['nota']} | {comp['competencia']}"
        for i, comp in enumerate(competencias_dados)
    ])

    user_prompt = (
        f"Tema da redação:\n{tema}\n\n"
        f"Texto da redação:\n{texto}\n\n"
        f"Notas por competência:\n{competencias_str_user}"
    )

    # Chamada ao modelo via Ollama
    response = ollama.chat(
        model="gemma:7b",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ]
    )

    return response["message"]["content"]


# Exemplo de uso

if __name__ == "__main__":
    try:
        # Lê o arquivo JSON
        with open("tema-34.json", "r", encoding="utf-8") as file:
            data = json.load(file)  # Carrega o conteúdo como um objeto Python

        # Converte o objeto Python de volta para string JSON (requisito da função)
            json_input = json.dumps(data)

        # Chama a função para avaliar a redação
            resultado = avaliar_redacao(json_input)

        # Atualiza o campo "cometarios"
            redacao = data[0]
            if not redacao.get("cometarios", "").strip():
                redacao["cometarios"] = resultado
            else:
                redacao["cometarios"] += "\n\n" + resultado


        # Imprime o resultado final
            print(json.dumps(redacao, indent=4, ensure_ascii=False))  # Exibe o JSON formatado

    except FileNotFoundError:
        print("Erro: O arquivo não foi encontrado.")
    except json.JSONDecodeError:
        print("Erro: O conteúdo do arquivo não é um JSON válido.")

    resultado = avaliar_redacao(json_input)

    # Após texto gerado pelo LLM como comentários/sugestão:
    if not redacao.get("cometarios", "").strip():
        redacao["cometarios"] = resultado  # Substitui VAZIO pelo conteúdo gerado
    else:
        redacao["cometarios"] += "\n\n" + resultado   # Para manter o comentário existente e adicionar novo comentário do ITS


    print(resultado)
